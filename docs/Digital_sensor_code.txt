#include <HTTPClient.h>
#include <WiFi.h>
#include <ArduinoJson.h>
#include <EEPROM.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <LiquidCrystal.h>

// Install all the above libraries in arduino IDE

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 5, en = 18, d4 = 19, d5 = 21, d6 = 22, d7 = 23;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
String ssid,pwd;
String Sensor1Name;
String Sensor1Pin;

String Name1;
String Pin1;

String title1;

int Sensor1_output;

String S1_output;

String String1_output;

String status1;

String output_name1;

String Type1;

String Sensor1_type;

//String starting_title;

String HighT1;
String LowT1;

int loop_t;

int first_pin=36;
int second_pin=39;
int third_pin=34;
int fourth_pin=35;
int fivth_pin=32;
int sixth_pin=33;
int seventh_pin=25;
int eighth_pin=26;

int lowthreshold1,highthreshold1;

void setup() 
{
    lcd.begin(16, 2);
    // lcd.setCursor(0, 0);
    //lcd.print("TRIOS TECH IOT     "); 
    //lcd.setCursor(0, 1);
    //lcd.print("                     "); 
    //delay(2000); 

    EEPROM.begin(512);
    ssid= readStringFromEEPROM(445);
    pwd= readStringFromEEPROM(478);
    //EEPROM.write(0,12);
    //EEPROM.write(30,11);
    Serial.begin(9600);                 //Serial connection
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid.c_str(), pwd.c_str());
    while (WiFi.waitForConnectResult() != WL_CONNECTED) {
        Serial.println("Connection Failed! Rebooting...");
        delay(5000);
        ESP.restart();
    }

    // Port defaults to 3232
    // ArduinoOTA.setPort(3232);

    // Hostname defaults to esp3232-[MAC]
    // ArduinoOTA.setHostname("myesp32");

    // No authentication by default
    // ArduinoOTA.setPassword("admin");

    // Password can be set with it's md5 value as well
    // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
    // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

    ArduinoOTA
        .onStart([]() {
            String type;
            if (ArduinoOTA.getCommand() == U_FLASH)
                type = "sketch";
            else // U_SPIFFS
                type = "filesystem";

            // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
            Serial.println("Start updating " + type);
        })
        .onEnd([]() {
            Serial.println("\nEnd");
        })
        .onProgress([](unsigned int progress, unsigned int total) {
            Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
        })
        .onError([](ota_error_t error) {
            Serial.printf("Error[%u]: ", error);
            if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
            else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
            else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
            else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
            else if (error == OTA_END_ERROR) Serial.println("End Failed");
        });

    ArduinoOTA.begin();

    Serial.println("Ready");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    delay(1000);
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print("   Connected```           "); 
    delay(2000);
    Serial.println("Wi-Fi connected");  
    lcd.clear();
    //title1="PROJECT TITLE ";
    //writeStringToEEPROM(480, title1);

    title1= readStringFromEEPROM(480);
    
    Name1 = readStringFromEEPROM(0);
    Pin1 = readStringFromEEPROM(30);
    Type1= readStringFromEEPROM(35);
    HighT1=readStringFromEEPROM(400);
    LowT1=readStringFromEEPROM(405);

    lcd.setCursor(0, 0);
    lcd.print(title1);
    //lcd.print("PROJECT TITLE "); 
    delay(2000);
    lcd.clear(); 

}

void loop() 
{
    Serial.println("start");
    ArduinoOTA.handle();
    if (WiFi.status() == WL_CONNECTED)          //Check WiFi connection status
    {
     lcd.setCursor(0, 0);
    lcd.print("SensorValue="); 
    lcd.print("                ");
    //lcd.setCursor(3, 0);

    Sensor1_output = digitalRead(first_pin);
    lcd.setCursor(0, 1);
        lcd.print(Sensor1_output);
        lcd.print("    "); 


    }
    else
    {
        lcd.setCursor(0, 0);
        lcd.print("   Network               "); 
        lcd.setCursor(0, 1);
        lcd.print("   Disconneccted       "); 
        //Serial.println("Error in WiFi connection");

        delay(500);
    }
    
    Serial.println("end"); 
}


void writeStringToEEPROM(int addrOffset, const String &strToWrite)
{
    byte len = strToWrite.length();
    EEPROM.write(addrOffset, len);
    //EEPROM.commit();
    for (int i = 0; i < len; i++)
    {
        EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
    }

    EEPROM.commit();
}


String readStringFromEEPROM(int addrOffset)
{
    int newStrLen = EEPROM.read(addrOffset);
    char data[newStrLen + 1] = {0};
    for (int i = 0; i < newStrLen; i++)
    {
        data[i] = EEPROM.read(addrOffset + 1 + i);
    }
    
    //data[newStrLen] = '\ 0'; // !!! NOTE !!! Remove the space between the slash "/" and "0" (I've added a space because otherwise there is a display bug)
    return String(data);
}
